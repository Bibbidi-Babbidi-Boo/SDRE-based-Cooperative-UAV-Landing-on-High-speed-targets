#!/usr/bin/env python
from __future__ import division
import rospy
import tf
import scipy.linalg as la
import numpy as np
from math import *
import mavros_msgs.srv
from mavros_msgs.msg import AttitudeTarget
from nav_msgs.msg import Odometry
from std_msgs.msg import *
from geometry_msgs.msg import *
from mavros_msgs.msg import *
from quadcopter.msg import *
import time
import csv
from timeit import default_timer as timer
from gazebo_msgs.msg import ModelStates
from geometry_msgs.msg import Twist
from rosgraph_msgs.msg import Clock



rospy.init_node('sdre', anonymous=True)
pub = rospy.Publisher("/drone/mavros/setpoint_raw/attitude", AttitudeTarget, queue_size=1)
pub2 = rospy.Publisher("/rover/mavros/setpoint_velocity/cmd_vel_unstamped", Twist, queue_size=1)

#posn = open('posn4.csv', 'w')

roll = 0.0
pitch = 0.0
yaw = 0.0
roll2 = 0.0
pitch2 = 0.0
yaw2 = 0.0
detect = 0
now = rospy.get_time()
now_p = rospy.get_time()
now2 = rospy.get_time()
now_p2 = rospy.get_time()

msg = AttitudeTarget()
msg2 = Twist()

###     Goal in gazebo frame with origin as start, from the start point of drone
goal = np.array([0.0, 0.0, 0.0])

goal_body = np.array([0.0, 0.0, 0.0])

x = 0.0
y = 0.0
z = 0.0
x_r = 0.0
y_r = 0.0
v_x = 0.0
v_y = 0.0
v_z = 0.0
v1_p = 0.0
v2_p = 0.0
v3 = 0.0

pos_rover = [0,0,0]
acc_rover = [0,0,0]
vel_rover = [0,0,0]

A = np.array([[0, 1, 0, 0, 0, 0, 0]
            ,[0, 0, 0, 0, 0, 0, 0]
            ,[0, 0, 0, 1, 0, 0, 0]
            ,[0, 0, 0, 0, 0, 0, 0]
            ,[0, 0, 0, 0, 0, 1, 0]
            ,[0, 0, 0, 0, 0, 0, 0]
            ,[0, 0, 0, 0, 0, 0, 0]])

Rot_body_to_inertial = np.array([[cos(yaw)*cos(pitch), -sin(yaw)*cos(roll)+sin(roll)*sin(pitch)*cos(yaw), sin(yaw)*sin(roll)+cos(roll)*cos(yaw)*sin(pitch)]
                        ,[sin(yaw)*cos(pitch), cos(yaw)*cos(roll)+sin(roll)*sin(pitch)*sin(yaw), -sin(roll)*cos(yaw)+sin(yaw)*sin(pitch)*cos(roll)]
                        ,[-sin(pitch), cos(pitch)*sin(roll), cos(pitch)*cos(roll)]])
Rot_inertial_to_body = Rot_body_to_inertial.transpose()

rover_goal = [[2,0]
             ,[2,2]
             ,[4,2]
             ,[4,4]
             ,[6,4]
             ,[6,6]
             ,[8,6]
             ,[8,8]
             ,[10,8]
             ,[10,10]
             ,[12,10]
             ,[12,0]]

flag2=0
land = 1
zhold = 0.435
def sdre():
    while not rospy.is_shutdown():
        global x_r, y_r, flag2, x, y, z, roll, pitch, yaw, vel_rover, goal, goal_body, v_x, v_y, v_z, Rot_body_to_inertial, Rot_inertial_to_body, yaw2, acc_rover, v3, zhold, rover_goal, pos_rover, land
        ####    Global to Body conversion for the goal

        #posn.write('%f;' % float(x))
        #posn.write('%f;' % float(z))
        #posn.write('%f;' % float(x_r))
        #posn.write('%f;' % float(now))
        #posn.write('\n')

        #if land==1:
        #    goal[2] = zhold
        if z>2:
            goal[0] = goal[0] - 3*cos(yaw2)*(1/(1+exp(-(z-6))))
            goal[1] = goal[1] - 3*sin(yaw2)*(1/(1+exp(-(z-6))))

        print ("goal", goal)
        #print("yaw2", yaw2)

        goal_body[0] = goal[0] - x
        goal_body[1] = goal[1] - y
        goal_body[2] = goal[2] - z

        goal_body = np.dot(Rot_inertial_to_body,goal_body.transpose())

        ####    Weighting Matrices Q R
        Q = np.array([[((5*goal_body[0])**2)/abs(0.05*goal_body[2]**2+0.0001)+1, 0, 0, 0, 0, 0, 0]
            ,[0, abs(150*(vel_rover[0]-v_x)/(0.001+0.01*abs(goal_body[0])+0.05*abs(goal_body[2]))), 0, 0, 0, 0, 0]
            ,[0, 0, ((5*goal_body[1])**2)/abs(0.05*goal_body[2]**2+0.0001)+1, 0, 0, 0, 0]
            ,[0, 0, 0, abs(150*(vel_rover[1]-v_x)/(0.001+0.01*abs(goal_body[1])+0.05*abs(goal_body[2]))), 0, 0, 0]
            ,[0, 0, 0, 0, 1+((30*goal_body[2])/sqrt(0.01+0.1*(goal_body[0]**2)+0.1*(goal_body[1]**2)))**2, 0, 0]   #normal
            #,[0, 0, 0, 0, 1+((10*goal_body[2]+10*(land))/sqrt(0.01+0.01*(goal_body[0]**2)+0.01*(goal_body[1]**2)))**2, 0, 0]   #alt hold
            ,[0, 0, 0, 0, 0, 1/abs(goal_body[2]+0.001), 0]   #normal
            #,[0, 0, 0, 0, 0, (1-land+0.0001)/abs(goal_body[2]+0.001), 0]   #alt hold
            ,[0, 0, 0, 0, 0, 0, 10/abs(goal_body[2]+0.001)]])

        R = np.array([[100, 0, 0, 0]    #z - accn
                    ,[0, 100, 0, 0]   #Pitch
                    ,[0, 0, 100, 0]   #Roll
                    ,[0, 0, 0, 500]])

        ####    Calculation for control done in body fixed frame
        ###     d2(e_x)/dt2 = 0-d2(x)/dt2 so all signs inverted
        X = np.array([[goal_body[0]],[vel_rover[0]-v_x],[goal_body[1]],[vel_rover[1]-v_y],[goal_body[2]],[vel_rover[2]-v_z],[yaw2-yaw]])


        B = np.array([[0, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 0], [1, 0, 0, 0], [0, 0, 0, 1]])

        P = la.solve_continuous_are(A, B, Q, R)

        u = np.dot(-np.linalg.inv(R),B.transpose())
        u = np.dot(u,P)
        u = np.dot(u,X)

        u0 = float(u[0])
        u1 = float(u[1])
        u2 = float(u[2])
        u3 = float(u[3])

        ####    Normalizing the received thrust
        u0 = ((acc_rover[2]-u0)*1.5 + 14.7)/29.4
        u1 = (acc_rover[0]-u1)/9.8
        u2 = (u2-acc_rover[1])/9.8
        u3 = v3-u3

        ####    Restrict rotation angles to 10 deg
        if u0>1:
            u0 = 1
        if u0<0:
            u0 = 0

        if u1>10*np.pi/180:
            u1 = 10*np.pi/180
        if u1<-10*np.pi/180:
            u1 = -10*np.pi/180

        if u2>10*np.pi/180:
            u2 = 10*np.pi/180
        if u2<-10*np.pi/180:
            u2 = -10*np.pi/180


        ####    Start descending for small errors
        if sqrt(goal_body[0]**2+goal_body[1]**2)<0.8 and abs(goal_body[2])<1:
            rospy.loginfo("LAND")
            u0 = 0.0
            u1 = 0.0
            u2 = 0.0


        ####    Convert to quaternions and publish
        quater = tf.transformations.quaternion_from_euler(u2,u1,yaw+np.pi/2) #0
        msg.header = Header()
        msg.type_mask = 0
        msg.orientation.x = quater[0]
        msg.orientation.y = quater[1]
        msg.orientation.z = quater[2]
        msg.orientation.w = quater[3]
        msg.body_rate.x = 0.0
        msg.body_rate.y = 0.0
        msg.body_rate.z = u3
        msg.thrust = u0

        pub.publish(msg)

        print(flag2)
        if sqrt((pos_rover[0]-rover_goal[flag2][0])**2 + (pos_rover[1]-rover_goal[flag2][1])**2) <= 2 and flag2!=len(rover_goal)-1:
            #print("Flag change")
            flag2+=1
            zhold = z
        ang = atan2(rover_goal[flag2][1]-pos_rover[1],rover_goal[flag2][0]-pos_rover[0])
        if abs(ang-yaw2+2*np.pi)<abs(ang-yaw2):
            ang+=2*np.pi
        if abs(ang-yaw2-2*np.pi)<abs(ang-yaw2):
            ang-=2*np.pi
        #print("diff", ang-yaw2)
        #print("yaw", yaw2)
        if abs(ang-yaw2)>=0.3:
            land=1
            #print("turn")
            if abs(ang - (yaw2+(ang-yaw2)*0.001))<abs(ang-yaw2):
                #print("type1")
                msg2.angular.z = 0.5*(ang-yaw2)
            else:
                #print("type2")
                msg2.angular.z = -0.5*(ang-yaw2)
            msg2.linear.x = 1
        else:
            if flag2%2==0:
                land=1
            else:
                land=0
            #print("straight")
            msg2.linear.x = 1.5*(sqrt((pos_rover[0]-rover_goal[flag2][0])**2 + (pos_rover[1]-rover_goal[flag2][1])**2))
            if abs(ang - (yaw2+(ang-yaw2)*0.001))<abs(ang-yaw2):
                #print("type3")
                msg2.angular.z = 0.8*(ang - yaw2)
            else:
                #print("type4")
                msg2.angular.z = -0.8*(ang - yaw2)

        if msg2.angular.z>0.8:
            msg2.angular.z = 0.8
        if msg2.angular.z<-0.8:
            msg2.angular.z = -0.8
        if msg2.linear.x>1.2:
            msg2.linear.x = 1.2

        # global now_p2, flag
        # if flag == 0:
        #     now_p2 = rospy.get_time()
        #     flag+=1
        # now2 = rospy.get_time()
        # print(now2-now_p2)
        # if 5<now2-now_p2<7 or 12<now2-now_p2<14 or 19<now2-now_p2<21:
        #     if flag2==0:
        #         zhold = z
        #         flag2+=1
        #     msg2.linear.x = 0.75
        #     msg2.angular.z = 0.785398
        # elif now2-now_p2<=5 or 14<=now2-now_p2<=19:
        #     flag2 = 0
        #     msg2.linear.x = 1.0
        #     msg2.angular.z = 0.0
        # elif 7<=now2-now_p2<=12 or 21<=now2-now_p2<=26:
        #     if flag2 == 0:
        #         zhold = z
        #         flag2+=1
        #     msg2.linear.x = 1.0
        #     msg2.angular.z = 0.0
        # else:
        #     flag2 = 0
        #     msg2.linear.x = 0.0
        #     msg2.angular.z = 0.0

        pub2.publish(msg2)
        rate = rospy.Rate(50)
        rate.sleep


def callback(info):
    ##MUST GET HEADING
    global x, y, z, roll, pitch, yaw, vel_rover, vel_drone_rot, vel_drone_trans, head, error_head_prev, goal, goal_body, v_x, v_y, v_z, Rot_body_to_inertial, Rot_inertial_to_body

    ###     Positions in global gazebo frame
    x = info.pose.pose.position.y
    y = -info.pose.pose.position.x
    z = info.pose.pose.position.z

    ###     All linear velocities are local
    v_x = info.twist.twist.linear.x
    v_y = info.twist.twist.linear.y
    v_z = info.twist.twist.linear.z

    ###     Orientations in order of rotation
    a1 = info.pose.pose.orientation.x
    b1 = info.pose.pose.orientation.y
    c1 = info.pose.pose.orientation.z
    d1 = info.pose.pose.orientation.w

    roll, pitch, yaw = tf.transformations.euler_from_quaternion([a1,b1,c1,d1])

    ###     Yaw in gazebo frame
    yaw = yaw-np.pi/2
    # if yaw<np.pi/2:
    #     yaw = yaw+2*np.pi/2
    # if yaw>np.pi/2:
    #     yaw = yaw-2*np.pi/2

    Rot_body_to_inertial = np.array([[cos(yaw)*cos(pitch), -sin(yaw)*cos(roll)+sin(roll)*sin(pitch)*cos(yaw), sin(yaw)*sin(roll)+cos(roll)*cos(yaw)*sin(pitch)]
                                    ,[sin(yaw)*cos(pitch), cos(yaw)*cos(roll)+sin(roll)*sin(pitch)*sin(yaw), -sin(roll)*cos(yaw)+sin(yaw)*sin(pitch)*cos(roll)]
                                    ,[-sin(pitch), cos(pitch)*sin(roll), cos(pitch)*cos(roll)]])
    Rot_inertial_to_body = Rot_body_to_inertial.transpose()

###     Add integral error
###     No land if no detect

def callback2(info):
    global goal, vel_rover, Rot_inertial_to_body, roll2, pitch2, yaw2, now_p, v1_p, v2_p, acc_rover, v3, pos_rover
    #t1 = rospy.get_rostime()
    now = timer()

    if now-now_p == 0:
        pass
    else:
        pos_rover[0] = info.pose[2].position.x
        pos_rover[1] = info.pose[2].position.y
        ##      Receive position info
        goal[0] = info.pose[2].position.x+8
        goal[1] = info.pose[2].position.y+0
        goal[2] = 0.435

        a1 = info.pose[2].orientation.x
        b1 = info.pose[2].orientation.y
        c1 = info.pose[2].orientation.z
        d1 = info.pose[2].orientation.w

        roll2, pitch2, yaw2 = tf.transformations.euler_from_quaternion([a1,b1,c1,d1])
        #yaw2 = yaw2-np.pi/2
        # if yaw2<0:
        #     yaw2 = yaw2+2*np.pi
        # if yaw2>2*np.pi:
        #     yaw2 = yaw2-2*np.pi

        ##      Receive vel info and convert to body fixed frame
        v1 = info.twist[2].linear.x
        v2 = info.twist[2].linear.y

        v3 = info.twist[2].angular.z

        # print("T", now-now_p)

        a1 = (v1-v1_p)/(now-now_p)
        a2 = (v2-v2_p)/(now-now_p)

        # print("A", a1, a2)

        #t2 = rospy.get_rostime()
        now_p = timer()

        v = np.array([[v1]
                    ,[v2]
                    ,[0.0]])

        a = np.array([[a1]
                    ,[a2]
                    ,[0.0]])

        v = np.dot(Rot_inertial_to_body, v)
        a = np.dot(Rot_inertial_to_body, a)

        vel_rover[0] = float(v[0])
        vel_rover[1] = float(v[1])
        vel_rover[2] = float(v[2])
        acc_rover[0] = float(a[0])
        acc_rover[1] = float(a[1])
        acc_rover[2] = float(a[2])
        v1_p = v1
        v2_p = v2

flag = 0

def listener():
    rospy.Subscriber("/gazebo/model_states", ModelStates, callback2)
    rospy.Subscriber("/drone/mavros/local_position/odom", Odometry, callback)
    #rospy.Subscriber("/clock", Clock, callback3)
    #rospy.Subscriber('/kalman_filter', kalman, ReceiveTar)
    sdre()
    rospy.spin()

if __name__ == '__main__':
    try:
        listener()
    except rospy.ROSInterruptException:
        posn.close()
        pass
